-- MySQL Script generated by MySQL Workbench
-- Mon Oct  5 12:43:28 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema CarRental
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema CarRental
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `CarRental` DEFAULT CHARACTER SET utf8 ;
SHOW WARNINGS;
USE `CarRental` ;

-- -----------------------------------------------------
-- Table `CarRental`.`customer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CarRental`.`customer` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `CarRental`.`customer` (
  `customer_id` INT NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(255) CHARACTER SET 'utf8mb4' NOT NULL,
  `last_name` VARCHAR(255) NOT NULL,
  `phone` VARCHAR(20) CHARACTER SET 'utf8mb4' NOT NULL,
  `address` VARCHAR(255) CHARACTER SET 'utf8mb4' NOT NULL,
  `zip_code` VARCHAR(6) CHARACTER SET 'utf8mb4' NOT NULL,
  `license_number` VARCHAR(16) CHARACTER SET 'utf8mb4' NOT NULL,
  `country` VARCHAR(255) CHARACTER SET 'utf8mb4' NOT NULL,
  `city` VARCHAR(255) CHARACTER SET 'utf8mb4' NOT NULL,
  PRIMARY KEY (`customer_id`),
  UNIQUE INDEX `license_number_UNIQUE` (`license_number` ASC) VISIBLE)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `CarRental`.`employee`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CarRental`.`employee` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `CarRental`.`employee` (
  `employee_id` INT NOT NULL AUTO_INCREMENT,
  `employee_number` INT NOT NULL,
  `first_name` VARCHAR(255) NOT NULL,
  `last_name` VARCHAR(255) NOT NULL,
  `hourly_salary` DECIMAL NOT NULL,
  PRIMARY KEY (`employee_id`),
  UNIQUE INDEX `employee_number_UNIQUE` (`employee_number` ASC) VISIBLE)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `CarRental`.`order`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CarRental`.`order` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `CarRental`.`order` (
  `order_id` INT NOT NULL AUTO_INCREMENT,
  `employee_id` INT NOT NULL,
  `customer_id` INT NOT NULL,
  `car_id` INT NOT NULL,
  `date_processed` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `rent_start_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `rent_end_date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `days` INT NOT NULL,
  `rate_applied` VARCHAR(255) NOT NULL,
  `order_total` DECIMAL NOT NULL,
  `order_status` BIT(1) NOT NULL,
  PRIMARY KEY (`order_id`),
  INDEX `car_id_idx` (`car_id` ASC) VISIBLE,
  INDEX `employee_id_idx` (`employee_id` ASC) VISIBLE,
  INDEX `customer_id_idx` (`customer_id` ASC) VISIBLE,
  CONSTRAINT `vehicle_id`
    FOREIGN KEY (`car_id`)
    REFERENCES `CarRental`.`vehicle` (`car_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `worker_id`
    FOREIGN KEY (`employee_id`)
    REFERENCES `CarRental`.`employee` (`employee_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `user_id`
    FOREIGN KEY (`customer_id`)
    REFERENCES `CarRental`.`customer` (`customer_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `CarRental`.`rate`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CarRental`.`rate` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `CarRental`.`rate` (
  `rate_id` INT NOT NULL AUTO_INCREMENT,
  `category` ENUM('A', 'B', 'C', 'D') NOT NULL,
  `daily` DECIMAL NOT NULL,
  `weekly` DECIMAL NOT NULL,
  `monthly` DECIMAL NOT NULL,
  PRIMARY KEY (`rate_id`))
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `CarRental`.`vehicle`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `CarRental`.`vehicle` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `CarRental`.`vehicle` (
  `car_id` INT NOT NULL AUTO_INCREMENT,
  `tag_number` CHAR(8) CHARACTER SET 'utf8mb4' NOT NULL,
  `model` VARCHAR(255) CHARACTER SET 'utf8mb4' NOT NULL,
  `make` VARCHAR(255) CHARACTER SET 'utf8mb4' NOT NULL,
  `car_year` YEAR(4) NOT NULL,
  `category` ENUM('A', 'B', 'C', 'D') NOT NULL,
  `mp3_layer` BIT(1) NULL,
  `dvd_player` BIT(1) NULL,
  `air_conditioner` BIT(1) NULL,
  `navigation` BIT(1) NULL,
  `available` BIT(1) NOT NULL,
  PRIMARY KEY (`car_id`),
  UNIQUE INDEX `tag_number_UNIQUE` (`tag_number` ASC) VISIBLE)
ENGINE = InnoDB;

SHOW WARNINGS;
USE `CarRental` ;

-- -----------------------------------------------------
-- procedure insertCustomer
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`insertCustomer`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE `insertCustomer` (	IN c_first VARCHAR(255)
	,IN c_last VARCHAR(255)
	,IN c_phone VARCHAR(20)
	,IN c_address VARCHAR(255)
	,IN c_zip VARCHAR(6)
	,IN c_license VARCHAR(16)
	,IN c_country VARCHAR(255)
	,IN c_city VARCHAR(255) )
	
BEGIN    
        INSERT INTO `customer` (
	first_name
    , last_name
	, phone
	, address
	, zip_code
	, license_number
	, country
	, city )
    
		VALUES (
	c_first
    , c_last
    , c_phone
    , c_address
    , c_zip
    , c_license
    , c_country
    , c_city );
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure charsetChange
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`charsetChange`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE `charsetChange` ()
BEGIN
	ALTER TABLE `carrental`.`vehicle` CONVERT to character set utf8mb4 collate utf8mb4_general_ci;
	ALTER TABLE `carrental`.`customer` CONVERT to character set utf8mb4 collate utf8mb4_general_ci;
	ALTER TABLE `carrental`.`employee` CONVERT to character set utf8mb4 collate utf8mb4_general_ci;
	ALTER TABLE `carrental`.`order` CONVERT to character set utf8mb4 collate utf8mb4_general_ci;
	ALTER TABLE `carrental`.`rate` CONVERT to character set utf8mb4 collate utf8mb4_general_ci;
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure insertVehicle
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`insertVehicle`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE insertVehicle (
	IN car_tag CHAR(8)
	,IN car_model VARCHAR(255)
	,IN car_make VARCHAR(255)
	,IN car_y YEAR(4)
	,IN car_category CHAR(1)
	,IN car_mp3 BIT(1)
	,IN car_dvd BIT(1)
	,IN car_air BIT(1)
    ,IN car_nav BIT(1)
    ,IN car_avail BIT(1) )
	
    BEGIN
    CALL charsetChange();
		INSERT INTO `vehicle` (
	tag_number
	, model
	, make
	, car_year
	, category
	, mp3_layer
	, dvd_player
    , air_conditioner
    , navigation
    , available)
    
		VALUES (
	car_tag
    , car_model
    , car_make
    , car_y
    , car_category
    , car_mp3
    , car_dvd
    , car_air
    , car_nav
    , car_avail);
                                 
    END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure showCarsByMake
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`showCarsByMake`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE showCarsByMake (param1 VARCHAR(40), param2 BIT(1))
BEGIN
	CALL charsetChange();
	SELECT tag_number, concat(c.make, ' ', c.model) AS name, c.category, r.daily, r.weekly, r.monthly 
    FROM `vehicle` AS c
	INNER JOIN `rate` AS r ON c.category = r.category
	WHERE c.make LIKE CONCAT('%' , param1 , '%') AND available = param2
	ORDER BY c.category ASC;
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure insertEmployee
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`insertEmployee`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE insertEmployee (IN e_number INT, IN e_first VARCHAR(255),
								 IN e_last VARCHAR(255), IN e_salary DECIMAL )
BEGIN
		INSERT INTO `employee` (employee_number, first_name,
								 last_name, hourly_salary)
		VALUES (e_number, e_first, e_last, e_salary);
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure howManyCarsOfCategory
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`howManyCarsOfCategory`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE howManyCarsOfCategory (IN value CHAR(1), IN status BIT(1), OUT total INT)
BEGIN
	CALL charsetChange();
	SELECT COUNT(c.car_id) FROM `vehicle` AS c
	INNER JOIN `rate` AS r ON c.category = r.category
	WHERE c.category = 'D' AND available = 1;
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure updateRate
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`updateRate`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE updateRate(IN u_ID INT, IN u_Category CHAR(1), IN u_Daily DECIMAL,
							IN u_Weekly DECIMAL, IN u_Monthly DECIMAL)
BEGIN
	SET SQL_SAFE_UPDATES = 0;
	UPDATE `rate` 
	SET daily = u_Daily, weekly = u_Weekly, monthly = u_Monthly
	WHERE category = u_Category OR rate_id = u_ID; 
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure showRateAndTotal
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`showRateAndTotal`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE showRateAndTotal (IN status BIT(1)) 
BEGIN
	SELECT r.category, daily, weekly, monthly, COUNT(c.car_id) AS total FROM `rate` AS r
	INNER JOIN `vehicle` AS c ON c.category = r.category
	WHERE c.available = status
	GROUP BY r.category, daily, weekly, monthly
	ORDER BY category ASC;
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure searchCustomer
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`searchCustomer`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE searchCustomer (IN param_country VARCHAR(255), IN param_address VARCHAR(255),
									IN param_name VARCHAR(255))
BEGIN
	DECLARE full_name VARCHAR(255);
    DECLARE id_value INT;
    DECLARE new_phone VARCHAR(20);
    DECLARE new_address VARCHAR(255);
    DECLARE finished BOOLEAN DEFAULT FALSE;
    
    DECLARE $myCursor CURSOR FOR SELECT customer_id, CONCAT(first_name, ' ', last_name), phone, address
    FROM `customer` WHERE `customer`.country LIKE CONCAT('%', param_country, '%') 
    AND `customer`.address LIKE CONCAT('%', param_address, '%') 
    AND (CONCAT(first_name, ' ', last_name) LIKE CONCAT('%', param_name, '%'));
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished := TRUE;
    
	CREATE TABLE IF NOT EXISTS `CarRental`.`customerFound` (
    id INT AUTO_INCREMENT PRIMARY KEY, customer_id INT NOT NULL,
	full_name VARCHAR(255) NOT NULL,
    telephone VARCHAR(20) NOT NULL,
    address VARCHAR(255) NOT NULL,
    FOREIGN KEY fk_customer(customer_id)
	REFERENCES `customer`(customer_id)
	ON UPDATE CASCADE
	ON DELETE NO ACTION)
    ENGINE = InnoDB;
    
    SET SQL_SAFE_UPDATES = 0;
    DELETE FROM customerFound;
	OPEN $myCursor;
    some_loop: LOOP
		FETCH $myCursor INTO id_value, full_name, new_phone, new_address;
        IF finished THEN
			LEAVE some_loop;
		END IF;
        
        INSERT INTO customerFound (customer_id, full_name, telephone, address) 
        VALUES (id_value, full_name, new_phone, new_address);
    END LOOP some_loop;
    CLOSE $myCursor;
    SELECT * FROM customerFound;
    DROP TABLE customerFound;
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure deleteVehicle
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`deleteVehicle`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE deleteVehicle(IN x_ID INT, IN x_Tag VARCHAR(8), IN x_Model VARCHAR(255), 
								IN x_Make VARCHAR(255), IN x_Year YEAR(4), IN x_Category CHAR(1), 
                                IN x_mp3 BIT(1), IN x_dvd BIT(1), IN x_Air BIT(1), 
                                IN x_Nav BIT(1), IN x_Avail BIT(1))
BEGIN
	SET SQL_SAFE_UPDATES = 0;
    CALL charsetChange();
    DELETE FROM `vehicle` WHERE 
    CASE 
		WHEN (x_ID IS NOT NULL) THEN `vehicle`.car_id = x_ID
        WHEN (x_Tag IS NOT NULL) THEN `vehicle`.tag_number = x_Tag
        WHEN (x_Model IS NOT NULL) THEN `vehicle`.model = x_Model
        WHEN (x_Make IS NOT NULL) THEN `vehicle`.make = x_Make
        WHEN (x_Year IS NOT NULL) THEN `vehicle`.car_year = x_Year
        WHEN (x_Category IS NOT NULL) THEN `vehicle`.category = x_Category
        WHEN (x_mp3 IS NOT NULL) THEN `vehicle`.mp3_layer = x_mp3
        WHEN (x_dvd IS NOT NULL) THEN `vehicle`.dvd_player = x_dvd
        WHEN (x_Air IS NOT NULL) THEN `vehicle`.air_conditioner = x_Air
        WHEN (x_Nav IS NOT NULL) THEN `vehicle`.navigation = x_Nav
        WHEN (x_Avail IS NOT NULL) THEN `vehicle`.available = x_Avail
        ELSE `vehicle`.car_id LIKE '%'
	END;
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure updateVehicle
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`updateVehicle`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE updateVehicle(IN u_ID INT, IN u_Tag VARCHAR(8), IN u_Model VARCHAR(255), 
								IN u_Make VARCHAR(255), IN u_Year YEAR(4), IN u_Category CHAR(1), 
                                IN u_mp3 BIT(1), IN u_dvd BIT(1), IN u_Air BIT(1), 
                                IN u_Nav BIT(1), IN u_Avail BIT(1))
BEGIN
	SET SQL_SAFE_UPDATES = 0;
    CALL charsetChange();
    UPDATE `vehicle` SET 
        `vehicle`.tag_number = u_Tag,
        `vehicle`.model = u_Model,
        `vehicle`.make = u_Make,
        `vehicle`.car_year = u_Year,
        `vehicle`.category = u_Category,
        `vehicle`.mp3_layer = u_mp3,
        `vehicle`.dvd_player = u_dvd,
        `vehicle`.air_conditioner = u_Air,
        `vehicle`.navigation = u_Nav,
        `vehicle`.available = u_Avail
        WHERE `vehicle`.car_id = u_ID;
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure updateCustomer
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`updateCustomer`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE updateCustomer(IN u_ID INT, IN u_First VARCHAR(255), IN u_Last VARCHAR(255), 
								IN u_Phone VARCHAR(20), IN u_Address VARCHAR(255), IN u_Zip CHAR(6), 
                                IN u_License VARCHAR(16), IN u_Country VARCHAR(255), IN u_City VARCHAR(255))
BEGIN
	SET SQL_SAFE_UPDATES = 0;
    CALL charsetChange();
    UPDATE `customer` SET 
        `customer`.first_name = u_First,
        `customer`.last_name = u_Last,
        `customer`.phone = u_Phone,
        `customer`.address = u_Address,
        `customer`.zip_code = u_Zip,
        `customer`.license_number = u_License,
        `customer`.country = u_Country,
        `customer`.city = u_City
        WHERE `customer`.customer_id = u_ID;
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure deleteCustomer
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`deleteCustomer`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE deleteCustomer(IN x_ID INT, IN x_First VARCHAR(255), IN x_Last VARCHAR(255), 
								IN x_Phone VARCHAR(20), IN x_Address VARCHAR(255), IN x_Zip CHAR(6), 
                                IN x_License VARCHAR(16), IN x_Country VARCHAR(255), IN x_City VARCHAR(255))
BEGIN
	SET SQL_SAFE_UPDATES = 0;
    CALL charsetChange();
    DELETE FROM `customer` WHERE 
    CASE 
		WHEN (x_ID IS NOT NULL) THEN `customer`.customer_id = x_ID
        WHEN (x_First IS NOT NULL) THEN `customer`.first_name = x_First
        WHEN (x_Last IS NOT NULL) THEN `customer`.last_name = x_Last
        WHEN (x_Phone IS NOT NULL) THEN `customer`.phone = x_Phone
        WHEN (x_Address IS NOT NULL) THEN `customer`.address = x_Address
        WHEN (x_Zip IS NOT NULL) THEN `customer`.zip_code = x_Zip
        WHEN (x_License IS NOT NULL) THEN `customer`.license_number = x_License
        WHEN (x_Country IS NOT NULL) THEN `customer`.country = x_Country
        WHEN (x_City IS NOT NULL) THEN `customer`.city = x_City
        ELSE `customer`.customer_id LIKE '%'
	END;
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure updateEmployee
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`updateEmployee`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE updateEmployee(IN u_ID INT, IN u_Number INT, IN u_First VARCHAR(255), IN u_Last VARCHAR(255), 
								IN u_Rate DECIMAL)
BEGIN
	SET SQL_SAFE_UPDATES = 0;
    CALL charsetChange();
    UPDATE `employee` SET 
		`employee`.employee_number = u_Number,
        `employee`.first_name = u_First,
        `employee`.last_name = u_Last,
        `employee`.hourly_salary = u_Rate
        WHERE `employee`.employee_id = u_ID;
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure deleteEmployee
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`deleteEmployee`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE deleteEmployee(IN x_ID INT, IN x_Number INT, IN x_First VARCHAR(255), IN x_Last VARCHAR(255), 
								IN x_Rate DECIMAL)
BEGIN
	SET SQL_SAFE_UPDATES = 0;
    CALL charsetChange();
    DELETE FROM `employee` WHERE 
    CASE 
		WHEN (x_ID IS NOT NULL) THEN `employee`.employee_id = x_ID
        WHEN (x_Number IS NOT NULL) THEN `employee`.employee_number = x_Number
        WHEN (x_First IS NOT NULL) THEN `employee`.first_name = x_First
        WHEN (x_Last IS NOT NULL) THEN `employee`.last_name = x_Last
        WHEN (x_Rate IS NOT NULL) THEN `employee`.hourly_salary = x_Rate
        ELSE `employee`.employee_id LIKE '%'
	END;
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure showCuteOrder
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`showCuteOrder`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE showCuteOrder()
BEGIN
	SELECT *, CONCAT('№',employee_number, ', ' ,e.first_name, ' ', e.last_name) AS "EMPLOYEE",
	CONCAT(c.first_name, ' ', c.last_name) AS "CUSTOMER",
	CONCAT(tag_number, ', ',make, ' ','"',model, ' ',car_year,'"') AS "VEHICLE"
	FROM `order` AS o
	INNER JOIN `employee` AS e ON e.employee_id = o.employee_id
    INNER JOIN `customer` AS c ON c.customer_id = o.customer_id
    INNER JOIN `vehicle` AS v ON v.car_id = o.car_id;
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- function getCustomer
-- -----------------------------------------------------

USE `CarRental`;
DROP function IF EXISTS `CarRental`.`getCustomer`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE FUNCTION getCustomer (ID INT) RETURNS VARCHAR(255)
		DETERMiNISTIC
BEGIN
	DECLARE fullname VARCHAR(255);
	SELECT CONCAT(c.first_name, ' ', c.last_name) INTO fullname FROM `customer` AS c
	WHERE c.customer_id = ID;
    RETURN fullname;
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- function getEmployee
-- -----------------------------------------------------

USE `CarRental`;
DROP function IF EXISTS `CarRental`.`getEmployee`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE FUNCTION getEmployee (ID INT) RETURNS VARCHAR(255)
		DETERMiNISTIC
BEGIN
	DECLARE fullname VARCHAR(255);
	SELECT CONCAT('№',employee_number, ', ' ,e.first_name, ' ', e.last_name) INTO fullname FROM `employee` AS e
	WHERE e.employee_id = ID;
    RETURN fullname;
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- function getCar
-- -----------------------------------------------------

USE `CarRental`;
DROP function IF EXISTS `CarRental`.`getCar`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE FUNCTION getCar (ID INT) RETURNS VARCHAR(255)
		DETERMiNISTIC
BEGIN
	DECLARE fullname VARCHAR(255);
	SELECT CONCAT(tag_number, ', ',make, ' ','"',model, ' ',car_year,'"') INTO fullname FROM `vehicle` AS v
	WHERE v.car_id = ID;
    RETURN fullname;
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- function getRate
-- -----------------------------------------------------

USE `CarRental`;
DROP function IF EXISTS `CarRental`.`getRate`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE FUNCTION getRate (ID INT) RETURNS VARCHAR(255)
		DETERMiNISTIC
BEGIN
	DECLARE fullname VARCHAR(255);
	SELECT CONCAT('$', daily, ', $',weekly, ', $',monthly) INTO fullname FROM `rate` AS r
	WHERE r.rate_id = ID;
    RETURN fullname;
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure insertOrder
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`insertOrder`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE insertOrder (
	IN i_Employee INT
	,IN i_Customer INT
	,IN i_Car INT
	,IN i_Date1 TIMESTAMP
	,IN i_Date2 TIMESTAMP
	,IN i_Date3 TIMESTAMP
	,IN i_Days INT
    ,IN i_Rate	VARCHAR(255)
    ,IN i_Total DECIMAL
    ,IN i_Status BIT(1) )
BEGIN
    CALL charsetChange();
	INSERT INTO `order` (
	employee_id, customer_id, car_id, date_processed, rent_start_date, rent_end_date, days, rate_applied, order_total, order_status)
    
		VALUES (
	i_Employee
	,i_Customer
	,i_Car
	,i_Date1
	,i_Date2
	,i_Date3 
    ,i_Days
    ,i_Rate
    ,i_Total,
    i_Status);                                 
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure updateOrder
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`updateOrder`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE updateOrder(IN u_ID INT
	,IN u_Employee INT
	,IN u_Customer INT
	,IN u_Car INT
	,IN u_Date1 TIMESTAMP
	,IN u_Date2 TIMESTAMP
	,IN u_Date3 TIMESTAMP
	,IN u_Days INT
    ,IN u_Rate	VARCHAR(255)
    ,IN u_Total DECIMAL
    ,IN u_Status BIT(1) )
BEGIN
	SET SQL_SAFE_UPDATES = 0;
    CALL charsetChange();
    UPDATE `order` SET 
        `order`.employee_id = u_Employee,
        `order`.customer_id = u_Customer,
        `order`.car_id = u_Car,
        `order`.date_processed = u_Date1,
        `order`.rent_start_date = u_Date2,
        `order`.rent_end_date = u_Date3,
        `order`.days = u_Days,
        `order`.rate_applied = u_Rate,
		`order`.order_total = u_Total,
        `order`.order_status = u_Status
        WHERE `order`.order_id = u_ID;
END$$

DELIMITER ;
SHOW WARNINGS;

-- -----------------------------------------------------
-- procedure deleteOrder
-- -----------------------------------------------------

USE `CarRental`;
DROP procedure IF EXISTS `CarRental`.`deleteOrder`;
SHOW WARNINGS;

DELIMITER $$
USE `CarRental`$$
CREATE PROCEDURE deleteOrder(IN x_ID INT
	,IN x_Employee INT
	,IN x_Customer INT
	,IN x_Car INT
	,IN x_Date1 TIMESTAMP
	,IN x_Date2 TIMESTAMP
	,IN x_Date3 TIMESTAMP
	,IN x_Days INT
    ,IN x_Rate	VARCHAR(255)
    ,IN x_Total DECIMAL
    ,IN x_Status BIT(1))
BEGIN
	SET SQL_SAFE_UPDATES = 0;
    CALL charsetChange();
    DELETE FROM `order` WHERE 
    CASE 
		WHEN (x_ID IS NOT NULL) THEN `order`.order_id = x_ID
        WHEN (x_Employee IS NOT NULL) THEN `order`.employee_id = x_Employee
        WHEN (x_Customer IS NOT NULL) THEN `order`.customer_id = x_Customer
        WHEN (x_Car IS NOT NULL) THEN `order`.car_id = x_Car
        WHEN (x_Date1 IS NOT NULL) THEN `order`.date_processed = x_Date1
        WHEN (x_Date2 IS NOT NULL) THEN `order`.rent_start_date = x_Date2
        WHEN (x_Date3 IS NOT NULL) THEN `order`.rent_end_date = x_Date3
        WHEN (x_Days IS NOT NULL) THEN `order`.days = x_Days
        WHEN (x_Rate IS NOT NULL) THEN `order`.rate_applied = x_Rate
        WHEN (x_Total IS NOT NULL) THEN `order`.order_total = x_Total
        WHEN (x_Status IS NOT NULL) THEN `order`.order_status = x_Status
        ELSE `order`.order_id LIKE '%'
	END;
END$$

DELIMITER ;
SHOW WARNINGS;
USE `CarRental`;

DELIMITER $$

USE `CarRental`$$
DROP TRIGGER IF EXISTS `CarRental`.`customer_BEFORE_INSERT` $$
SHOW WARNINGS$$
USE `CarRental`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CarRental`.`customer_BEFORE_INSERT` BEFORE INSERT ON `customer` FOR EACH ROW
BEGIN
	IF ( NEW.first_name = '' )
	THEN
    	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'First name field is empty!';
	ELSEIF ( NEW.last_name = '' )
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Last name field is empty!';
	ELSEIF ( NEW.phone = '' )
    THEN
    	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Telephone field is empty!';
	ELSEIF ( NEW.address = '' )
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Address field is empty!';
	ELSEIF ( NEW.zip_code = '' )
    THEN
    	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Zip_code field is empty!';
	ELSEIF ( NEW.license_number = '' )
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'License number field is empty!';
	ELSEIF ( NEW.country = '' )
    THEN
    	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Country field is empty!';        
    ELSEIF ( NEW.city = '' )
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'City field is empty!';
	END IF;
END$$

SHOW WARNINGS$$

USE `CarRental`$$
DROP TRIGGER IF EXISTS `CarRental`.`customer_BEFORE_UPDATE` $$
SHOW WARNINGS$$
USE `CarRental`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CarRental`.`customer_BEFORE_UPDATE` BEFORE UPDATE ON `customer` FOR EACH ROW
BEGIN
	IF ( NEW.first_name = '' )
	THEN
    	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'First name field is empty!';
	ELSEIF ( NEW.last_name = '' )
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Last name field is empty!';
	ELSEIF ( NEW.phone = '' )
    THEN
    	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Telephone field is empty!';
	ELSEIF ( NEW.address = '' )
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Address field is empty!';
	ELSEIF ( NEW.zip_code = '' )
    THEN
    	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Zip_code field is empty!';
	ELSEIF ( NEW.license_number = '' )
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'License number field is empty!';
	ELSEIF ( NEW.country = '' )
    THEN
    	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Country field is empty!';        
    ELSEIF ( NEW.city = '' )
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'City field is empty!';
	END IF;
END$$

SHOW WARNINGS$$

USE `CarRental`$$
DROP TRIGGER IF EXISTS `CarRental`.`employee_BEFORE_INSERT` $$
SHOW WARNINGS$$
USE `CarRental`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CarRental`.`employee_BEFORE_INSERT` BEFORE INSERT ON `employee` FOR EACH ROW
BEGIN
	IF ( NEW.employee_number = '' )
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'PID field is empty!';
	ELSEIF ( NEW.first_name = '' )
	THEN
    	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'First name field is empty!';
	ELSEIF ( NEW.last_name = '' )
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Last name field is empty!';
	ELSEIF ( NEW.hourly_salary = '' )
    THEN
    	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Salary field is empty!';
	END IF;
END$$

SHOW WARNINGS$$

USE `CarRental`$$
DROP TRIGGER IF EXISTS `CarRental`.`employee_BEFORE_UPDATE` $$
SHOW WARNINGS$$
USE `CarRental`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CarRental`.`employee_BEFORE_UPDATE` BEFORE UPDATE ON `employee` FOR EACH ROW
BEGIN
	IF ( NEW.employee_number = '' )
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'PID field is empty!';
	ELSEIF ( NEW.first_name = '' )
	THEN
    	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'First name field is empty!';
	ELSEIF ( NEW.last_name = '' )
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Last name field is empty!';
	ELSEIF ( NEW.hourly_salary = '' )
    THEN
    	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Salary field is empty!';
	END IF;
END$$

SHOW WARNINGS$$

USE `CarRental`$$
DROP TRIGGER IF EXISTS `CarRental`.`order_BEFORE_INSERT` $$
SHOW WARNINGS$$
USE `CarRental`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CarRental`.`order_BEFORE_INSERT`
BEFORE INSERT ON `order` 
FOR EACH ROW
BEGIN
	IF ((SELECT available FROM `CarRental`.`vehicle` WHERE `vehicle`.car_id = NEW.car_id) = 0)
	THEN
    	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You selected unavailable item!';
	END IF;
END$$

SHOW WARNINGS$$

USE `CarRental`$$
DROP TRIGGER IF EXISTS `CarRental`.`order_AFTER_INSERT` $$
SHOW WARNINGS$$
USE `CarRental`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CarRental`.`order_AFTER_INSERT` 
AFTER INSERT ON `order` 
FOR EACH ROW
BEGIN
	UPDATE `vehicle`
    SET `available` = 0
    WHERE NEW.car_id = car_id;
END$$

SHOW WARNINGS$$

USE `CarRental`$$
DROP TRIGGER IF EXISTS `CarRental`.`order_BEFORE_UPDATE` $$
SHOW WARNINGS$$
USE `CarRental`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CarRental`.`order_BEFORE_UPDATE` BEFORE UPDATE ON `order` FOR EACH ROW
BEGIN
IF (NEW.car_id != OLD.car_id)
	THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Can not switch car.';
	END IF;
END$$

SHOW WARNINGS$$

USE `CarRental`$$
DROP TRIGGER IF EXISTS `CarRental`.`order_AFTER_DELETE` $$
SHOW WARNINGS$$
USE `CarRental`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CarRental`.`order_AFTER_DELETE` AFTER DELETE ON `order` FOR EACH ROW
BEGIN
	UPDATE `vehicle`
    SET `available` = 1
    WHERE OLD.car_id = car_id;
END$$

SHOW WARNINGS$$

USE `CarRental`$$
DROP TRIGGER IF EXISTS `CarRental`.`rate_BEFORE_UPDATE` $$
SHOW WARNINGS$$
USE `CarRental`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CarRental`.`rate_BEFORE_UPDATE` BEFORE UPDATE ON `rate` FOR EACH ROW
BEGIN
	IF (NEW.daily = 0 or NEW.daily = '')
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'rate not allowed!';
	ELSEIF (NEW.weekly = 0 or NEW.weekly = '')
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'rate not allowed!';
	ELSEIF (NEW.monthly = 0 or NEW.weekly = '')
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'rate not allowed!';
	END IF;
END$$

SHOW WARNINGS$$

USE `CarRental`$$
DROP TRIGGER IF EXISTS `CarRental`.`vehicle_BEFORE_INSERT` $$
SHOW WARNINGS$$
USE `CarRental`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CarRental`.`vehicle_BEFORE_INSERT` BEFORE INSERT ON `vehicle` FOR EACH ROW
BEGIN
	IF ( CHAR_LENGTH(NEW.tag_number) != 8 )
	THEN
    	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Tag number is not allowed!';
	ELSEIF ( NEW.model = '' )
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Model field is empty!';
	ELSEIF ( NEW.make = '' )
    THEN
    	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Make field is empty!';
	END IF;
END$$

SHOW WARNINGS$$

USE `CarRental`$$
DROP TRIGGER IF EXISTS `CarRental`.`vehicle_BEFORE_UPDATE` $$
SHOW WARNINGS$$
USE `CarRental`$$
CREATE DEFINER = CURRENT_USER TRIGGER `CarRental`.`vehicle_BEFORE_UPDATE` BEFORE UPDATE ON `vehicle` FOR EACH ROW
BEGIN
	IF ( CHAR_LENGTH(NEW.tag_number) != 8 )
	THEN
    	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Tag number is not allowed!';
	ELSEIF ( NEW.model = '' )
    THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Model field is empty!';
	ELSEIF ( NEW.make = '' )
    THEN
    	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Make field is empty!';
	END IF;
END$$

SHOW WARNINGS$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `CarRental`.`customer`
-- -----------------------------------------------------
START TRANSACTION;
USE `CarRental`;
INSERT INTO `CarRental`.`customer` (`customer_id`, `first_name`, `last_name`, `phone`, `address`, `zip_code`, `license_number`, `country`, `city`) VALUES (DEFAULT, 'Cathrine', 'Jones', '731-733-7912', '3859  Lords Way', '38363', '105768857', 'USA', 'Parsons');
INSERT INTO `CarRental`.`customer` (`customer_id`, `first_name`, `last_name`, `phone`, `address`, `zip_code`, `license_number`, `country`, `city`) VALUES (DEFAULT, 'Charles', 'Stein', '301-629-7712', '3986  Del Dew Drive', '20011', 'H400824640450', 'USA', 'Washington');
INSERT INTO `CarRental`.`customer` (`customer_id`, `first_name`, `last_name`, `phone`, `address`, `zip_code`, `license_number`, `country`, `city`) VALUES (DEFAULT, 'Андрей', 'Васильков', '8 (929) 788-48-70', '618442, г. Красноолмский, ул. Береговой Проезд, дом 39, квартира 210', '922111', 'RUSS93343X', 'Россия', 'Краснодар');
INSERT INTO `CarRental`.`customer` (`customer_id`, `first_name`, `last_name`, `phone`, `address`, `zip_code`, `license_number`, `country`, `city`) VALUES (DEFAULT, 'Валерий', 'Богданов', '8 (922) 134-79-65', '623109, г. Лопатино, ул. Земляной Вал Площадь, дом 81, квартира 94', '383438', 'RU83943000', 'Россия', 'Ростов');
INSERT INTO `CarRental`.`customer` (`customer_id`, `first_name`, `last_name`, `phone`, `address`, `zip_code`, `license_number`, `country`, `city`) VALUES (DEFAULT, 'Raymond', 'Pelaez', '907-382-6414', '3828 Blackwell Street', '99503', '837429239', 'Spain', 'Madrid');
INSERT INTO `CarRental`.`customer` (`customer_id`, `first_name`, `last_name`, `phone`, `address`, `zip_code`, `license_number`, `country`, `city`) VALUES (DEFAULT, 'Pelagia', 'Gavrilova', '0470-7192164', 'Östantorp Vinö 20', '03043', 'SW3439483', 'Sweden', 'Stockholm');
INSERT INTO `CarRental`.`customer` (`customer_id`, `first_name`, `last_name`, `phone`, `address`, `zip_code`, `license_number`, `country`, `city`) VALUES (DEFAULT, 'Joe', 'Pyburn', '910-244-2090', '3257 Stratford Court', '28301', '429813524894', 'USA', 'Fayetteville');
INSERT INTO `CarRental`.`customer` (`customer_id`, `first_name`, `last_name`, `phone`, `address`, `zip_code`, `license_number`, `country`, `city`) VALUES (DEFAULT, 'Amber', 'W Stoll', '631-278-5771', '970 Frosty Lane', '14822', '884 685 690', 'USA', 'New York');
INSERT INTO `CarRental`.`customer` (`customer_id`, `first_name`, `last_name`, `phone`, `address`, `zip_code`, `license_number`, `country`, `city`) VALUES (DEFAULT, 'Геннадий', 'Адрианов', '+7(8202)37-55-76', 'Беляева Ул., дом 17, кв. 15', '870082', '448552932008', 'Россия', ' Череповец');
INSERT INTO `CarRental`.`customer` (`customer_id`, `first_name`, `last_name`, `phone`, `address`, `zip_code`, `license_number`, `country`, `city`) VALUES (DEFAULT, 'Мария', 'Кириллова', '+7(831)948-78-48', 'Краснодонцев Ул., дом 17, кв. 62', '114008', '555299098410', 'Россия', ' Нижний Новгород');

COMMIT;


-- -----------------------------------------------------
-- Data for table `CarRental`.`employee`
-- -----------------------------------------------------
START TRANSACTION;
USE `CarRental`;
INSERT INTO `CarRental`.`employee` (`employee_id`, `employee_number`, `first_name`, `last_name`, `hourly_salary`) VALUES (DEFAULT, 1, 'Sanchez', 'Santino', 20);
INSERT INTO `CarRental`.`employee` (`employee_id`, `employee_number`, `first_name`, `last_name`, `hourly_salary`) VALUES (DEFAULT, 2, 'Adam', 'Wilson', 20);
INSERT INTO `CarRental`.`employee` (`employee_id`, `employee_number`, `first_name`, `last_name`, `hourly_salary`) VALUES (DEFAULT, 3, 'Wade', 'Wilson', 50);

COMMIT;


-- -----------------------------------------------------
-- Data for table `CarRental`.`rate`
-- -----------------------------------------------------
START TRANSACTION;
USE `CarRental`;
INSERT INTO `CarRental`.`rate` (`rate_id`, `category`, `daily`, `weekly`, `monthly`) VALUES (DEFAULT, 'A', 400, 2400, 10000);
INSERT INTO `CarRental`.`rate` (`rate_id`, `category`, `daily`, `weekly`, `monthly`) VALUES (DEFAULT, 'B', 100, 650, 2000);
INSERT INTO `CarRental`.`rate` (`rate_id`, `category`, `daily`, `weekly`, `monthly`) VALUES (DEFAULT, 'C', 50, 300, 1000);
INSERT INTO `CarRental`.`rate` (`rate_id`, `category`, `daily`, `weekly`, `monthly`) VALUES (DEFAULT, 'D', 15, 90, 300);

COMMIT;


-- -----------------------------------------------------
-- Data for table `CarRental`.`vehicle`
-- -----------------------------------------------------
START TRANSACTION;
USE `CarRental`;
INSERT INTO `CarRental`.`vehicle` (`car_id`, `tag_number`, `model`, `make`, `car_year`, `category`, `mp3_layer`, `dvd_player`, `air_conditioner`, `navigation`, `available`) VALUES (DEFAULT, '4443BCDE', 'X5 M', 'BMW', 2016, 'B', 1, 1, 1, 1, 1);
INSERT INTO `CarRental`.`vehicle` (`car_id`, `tag_number`, `model`, `make`, `car_year`, `category`, `mp3_layer`, `dvd_player`, `air_conditioner`, `navigation`, `available`) VALUES (DEFAULT, '1115ABCD', 'A3', 'Audi', 2006, 'C', 0, 0, 0, 0, 1);
INSERT INTO `CarRental`.`vehicle` (`car_id`, `tag_number`, `model`, `make`, `car_year`, `category`, `mp3_layer`, `dvd_player`, `air_conditioner`, `navigation`, `available`) VALUES (DEFAULT, '1198DFEI', 'RC F', 'Lexus', 2019, 'A', 1, 1, 1, 1, 1);
INSERT INTO `CarRental`.`vehicle` (`car_id`, `tag_number`, `model`, `make`, `car_year`, `category`, `mp3_layer`, `dvd_player`, `air_conditioner`, `navigation`, `available`) VALUES (DEFAULT, '3383DKFJ', 'M5', 'BMW', 2015, 'B', 1, 1, 1, 1, 1);
INSERT INTO `CarRental`.`vehicle` (`car_id`, `tag_number`, `model`, `make`, `car_year`, `category`, `mp3_layer`, `dvd_player`, `air_conditioner`, `navigation`, `available`) VALUES (DEFAULT, '7391AAAB', 'TTS', 'Audi', 2019, 'B', 1, 1, 1, 1, 1);
INSERT INTO `CarRental`.`vehicle` (`car_id`, `tag_number`, `model`, `make`, `car_year`, `category`, `mp3_layer`, `dvd_player`, `air_conditioner`, `navigation`, `available`) VALUES (DEFAULT, 'AAAA0000', '911 Turbo', 'Porsche', 2019 , 'A', 1, 1, 1, 1, 1);
INSERT INTO `CarRental`.`vehicle` (`car_id`, `tag_number`, `model`, `make`, `car_year`, `category`, `mp3_layer`, `dvd_player`, `air_conditioner`, `navigation`, `available`) VALUES (DEFAULT, 'DDDD1234', 'Protege LX', 'Mazda', 1998, 'D', 0, 0, 0, 0, 1);
INSERT INTO `CarRental`.`vehicle` (`car_id`, `tag_number`, `model`, `make`, `car_year`, `category`, `mp3_layer`, `dvd_player`, `air_conditioner`, `navigation`, `available`) VALUES (DEFAULT, 'BBBB0001', 'Equinox 1LT', 'Chevrolet', 2018, 'B', 1, 0, 1, 1, 1);
INSERT INTO `CarRental`.`vehicle` (`car_id`, `tag_number`, `model`, `make`, `car_year`, `category`, `mp3_layer`, `dvd_player`, `air_conditioner`, `navigation`, `available`) VALUES (DEFAULT, 'DDDD0001', 'RAV4', 'Toyota', 2000, 'D', 0, 0, 0, 0, 1);
INSERT INTO `CarRental`.`vehicle` (`car_id`, `tag_number`, `model`, `make`, `car_year`, `category`, `mp3_layer`, `dvd_player`, `air_conditioner`, `navigation`, `available`) VALUES (DEFAULT, 'BBBB0002', 'Continental GT', 'Bentley ', 2008, 'B', 1, 0, 1, 0, 1);
INSERT INTO `CarRental`.`vehicle` (`car_id`, `tag_number`, `model`, `make`, `car_year`, `category`, `mp3_layer`, `dvd_player`, `air_conditioner`, `navigation`, `available`) VALUES (DEFAULT, 'CCCC0001', 'Shelby GT500', 'Ford', 2007, 'C', 0, 0, 0, 1, 1);
INSERT INTO `CarRental`.`vehicle` (`car_id`, `tag_number`, `model`, `make`, `car_year`, `category`, `mp3_layer`, `dvd_player`, `air_conditioner`, `navigation`, `available`) VALUES (DEFAULT, 'AAAA0001', 'Phantom', 'Rolls-Royce', 2018, 'A', 1, 1, 1, 1, 1);
INSERT INTO `CarRental`.`vehicle` (`car_id`, `tag_number`, `model`, `make`, `car_year`, `category`, `mp3_layer`, `dvd_player`, `air_conditioner`, `navigation`, `available`) VALUES (DEFAULT, 'AAAA0002', 'Vanquish', 'Aston Martin', 2019, 'A', 1, 1, 1, 1, 1);
INSERT INTO `CarRental`.`vehicle` (`car_id`, `tag_number`, `model`, `make`, `car_year`, `category`, `mp3_layer`, `dvd_player`, `air_conditioner`, `navigation`, `available`) VALUES (DEFAULT, 'DDDD0002', 'Grand Am', 'Pontiac', 2001, 'D', 0, 0, 0, 0, 1);

COMMIT;

